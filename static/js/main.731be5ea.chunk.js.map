{"version":3,"sources":["components/Board/index.tsx","components/Options/index.tsx","utils/types.ts","utils/helpers.ts","utils/scoring.ts","utils/computer.ts","components/Announcements/index.tsx","components/Game/index.tsx","App.tsx","index.tsx"],"names":["COLUMNS","classNames","map","r","c","reduce","acc","arr","Board","this","props","board","userTurn","tiles","i","className","marker","push","key","onClick","renderBoard","React","Component","Options","state","isHard","player","undefined","startGame","setState","role","aria-label","callStart","resetGame","hasGameStarted","innerHtml","renderResetButton","renderPrePlayOptions","getEmptySpaces","emptySpaces","length","pickRandomElement","Math","floor","random","findWinner","findWinnerInRows","slice","findHorizontalWinner","findDiagonalWinner","findVerticalWinner","isTie","filter","tile","isGameOver","rows","first","second","third","getComputerMove","minimax","depth","moves","move","adversary","spaceIndex","score","originalTile","scoreGame","maxBy","obj","minBy","getHardMove","getEasyMove","winner","WON_TEXT","TIED_TEXT","LOST_TEXT","Announcements","text","textArr","randomText","html","renderAnnouncement","Game","a","computerTurn","isSpaceAvailable","makeMove","checkForEndOfGame","ogBoard","optionsClassname","args","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.731be5ea.chunk.js","sourcesContent":["import React from 'react'\nimport { Board as BoardType, Move } from '../../utils/types'\nimport './style.css'\n\ntype BoardProps = {\n  board: BoardType\n  userTurn: (choice: Move) => any\n}\n\nconst ROWS = ['top', 'center', 'bottom']\nconst COLUMNS = ['left', 'middle', 'right']\n\nconst classNames = ROWS\n  .map(r => COLUMNS.map(c => `${r} ${c}`))\n  .reduce((acc, arr) => [...acc, ...arr], [])\n\nexport default class Board extends React.Component<BoardProps> {\n  renderBoard() {\n    const { board, userTurn } = this.props\n    const tiles: JSX.Element[] = []\n    for (let i: Move = 0; i < 9; i++) {\n      const className = classNames[i]\n      const marker = board[i]\n      tiles.push(\n        <div key={i} className={`tile ${className}`} onClick={() => userTurn(i)}>\n          <div className='tile-content'>{marker}</div>\n        </div>\n      )\n    }\n    return tiles\n  }\n  render() {\n    return (\n      <section className='board'>\n        {this.renderBoard()}\n      </section>\n    )\n  }\n}\n","import React from 'react'\nimport { Player, COMPUTER, HUMAN } from '../../utils/types'\nimport './style.css'\n\ninterface OptionsProps {\n  isHard?: boolean\n  hasGameStarted: boolean\n  className: string\n  resetGame: () => any\n  startGame: (args: { player: Player, isHard: boolean }) => any\n}\ninterface OptionsState {\n  isHard?: boolean\n}\n\nexport default class Options extends React.Component<OptionsProps, OptionsState> {\n  constructor(props: OptionsProps) {\n    super(props)\n    this.state = {\n      isHard: props.isHard\n    }\n  }\n\n  callStart(player: Player) {\n    const { isHard } = this.state\n    if (isHard === undefined) {\n      return\n    }\n    this.props.startGame({ player, isHard })\n    this.setState({ isHard: undefined })\n  }\n\n  renderPrePlayOptions() {\n    if (this.state.isHard === undefined) {\n      return (\n        <div>\n          <h3>Which way do you wanna do this?</h3>\n          <p>\n            <button className='options-button' onClick={() => this.setState({ isHard: true })}>\n              <span role='img' aria-label='Fire'>ðŸ”¥</span> The Hard Way?? <span role='img' aria-label='Fire'>ðŸ”¥</span>\n            </button>\n          </p>\n          <p>\n            <button className='options-button' onClick={() => this.setState({ isHard: false })}>\n              <span role='img' aria-label='Relieved Face'>ðŸ˜Œ</span> The Easy Way <span role='img' aria-label='Relieved Face'>ðŸ˜Œ</span>\n            </button>\n          </p>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <h3>Who goes first?</h3>\n            <p>\n              <button className='options-button' onClick={() => this.callStart(COMPUTER)}>\n                <span role='img' aria-label='Robot'>ðŸ¤–</span> Computer <span role='img' aria-label='Robot'>ðŸ¤–</span>\n              </button>\n            </p>\n            <p>\n              <button className='options-button' onClick={() => this.callStart(HUMAN)}>\n                <span role='img' aria-label='Bust in Silhouette'>ðŸ‘¤</span> YOU! <span role='img' aria-label='Bust in Silhouette'>ðŸ‘¤</span>\n              </button>\n            </p>\n        </div>\n      )\n    }\n  }\n\n  renderResetButton() {\n    const { resetGame } = this.props\n    return (\n      <div className='start-over'>\n        <button className='options-button' onClick={resetGame}>Start Over</button>\n      </div>\n    )\n  }\n\n  render() {\n    const { hasGameStarted, className } = this.props\n    const innerHtml = hasGameStarted ? this.renderResetButton() : this.renderPrePlayOptions()\n    return (\n      <section className={`options ${className}`}>\n        {innerHtml}\n      </section>\n    )\n  }\n}\n","export type Computer = 'O'\nexport const COMPUTER = 'O'\nexport type Human = 'X'\nexport const HUMAN = 'X'\nexport type Empty = ''\nexport const EMPTY = ''\nexport type Player = Human | Computer\nexport type Tile = Empty | Player\n\nexport type Board = [\n  Tile, Tile, Tile,\n  Tile, Tile, Tile,\n  Tile, Tile, Tile\n]\n\nexport type Move = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8\n","import { Board, Move } from './types'\n\nexport function getEmptySpaces(board: Board) {\n  const emptySpaces: Move[] = []\n  for (let i = 0; i < board.length; i++) {\n    if (board[i] === '') {\n      emptySpaces.push(i as Move)\n    }\n  }\n  return emptySpaces\n}\n\nexport function pickRandomElement<returnType>(arr: any[]) {\n  const i = Math.floor(Math.random() * arr.length)\n  return arr[i] as returnType | undefined\n}\n","import { Board, Tile } from './types'\n\ntype Row = [Tile , Tile, Tile]\n\nexport function findWinner(board: Board) {\n  return findHorizontalWinner(board) || findDiagonalWinner(board) || findVerticalWinner(board)\n}\n\nexport function isTie(board: Board) {\n  if (!!findWinner(board)) {\n    return false\n  }\n  return board.filter(tile => tile !== '').length === board.length\n}\n\nexport function isGameOver(board: Board) {\n  return !!findWinner(board) || isTie(board)\n}\n\nfunction findWinnerInRows(rows: Row[]) {\n  for (let [first, second, third] of rows) {\n    if (first !== '' && first === second && second === third) {\n      return first\n    }\n  }\n}\n\nfunction findHorizontalWinner(board: Board) {\n  const rows: Row[] = [\n    board.slice(0, 3) as Row,\n    board.slice(3, 6) as Row,\n    board.slice(6, 9) as Row\n  ]\n  return findWinnerInRows(rows)\n}\n\nfunction findDiagonalWinner(board: Board) {\n  const rows: Row[] = [\n    [board[0], board[4], board[8]],\n    [board[2], board[4], board[6]],\n  ]\n  return findWinnerInRows(rows)\n}\n\nfunction findVerticalWinner(board: Board) {\n  const rows: Row[] = [\n    [board[0], board[3], board[6]],\n    [board[1], board[4], board[7]],\n    [board[2], board[5], board[8]],\n  ]\n  return findWinnerInRows(rows)\n}\n","import maxBy from 'lodash.maxby'\nimport minBy from 'lodash.minby'\nimport { Board, Move, EMPTY, COMPUTER, HUMAN, Player } from './types'\nimport { getEmptySpaces, pickRandomElement } from './helpers'\nimport { isGameOver, findWinner } from './scoring'\n\ninterface MinimaxMove {\n  move?: Move\n  score?: number\n}\n\nexport function getComputerMove({ board, isHard = false }: { board: Board, isHard?: boolean }) {\n  return isHard ? getHardMove(board) : getEasyMove(board)\n}\n\nfunction getEasyMove(board: Board) {\n  const emptySpaces = getEmptySpaces(board)\n  return pickRandomElement<Move>(emptySpaces)\n}\n\nfunction getHardMove(board: Board): Move | undefined {\n  //if middle tile isn't taken take it\n  if (board[4] === EMPTY) {\n    return 4\n  }\n  //only the middle is taken, take a corner\n  if (getEmptySpaces(board).length === 8) {\n    return pickRandomElement<Move>([0, 2, 6, 8])\n  }\n  //no short cut available, run minimax algo\n  const { move } = minimax(board)\n  return move\n}\n\n// the minimax algorithm which with returns a move and the score for that move\nfunction minimax(board: Board, player: Player = COMPUTER, depth = 0): MinimaxMove {\n  let moves: MinimaxMove[] = []\n  let emptySpaces = getEmptySpaces(board)\n  //base case to break recursion\n  if (!emptySpaces.length) {\n    return { move: undefined }\n  }\n  //set adversary for recursive calls\n  const adversary: Player = player === COMPUTER ? HUMAN : COMPUTER\n  depth++\n  //iterate through potential moves\n  for (let spaceIndex = 0; emptySpaces.length > spaceIndex; spaceIndex++) {\n    let score\n    //select a move to try\n    let move = emptySpaces[spaceIndex]\n    //store original tile to reset board\n    let originalTile = board[move]\n    //take selected move\n    board[move] = player\n    if (isGameOver(board)) {\n      score = scoreGame(board, depth)\n    } else {\n      //if game is not over keep going...\n      score = minimax(board, adversary, depth).score\n    }\n    moves.push({ score, move })\n    board[move] = originalTile\n  }\n\n  if (player === COMPUTER && moves.length > 0) {\n    //if player is computer the best move it can make\n    return maxBy(moves, (obj) => obj.score) as MinimaxMove\n  } else {\n    //if player is human the best move it can make\n    //AKA the worst move for the computer\n    return minBy(moves, (obj) => obj.score) as MinimaxMove\n  }\n}\n\nfunction scoreGame(board: Board, depth: number) {\n  const winner = findWinner(board)\n  const multiplier = winner === COMPUTER ? 1 : -1\n  return !!winner ? (10 - depth) * multiplier : 0\n}\n","import React from 'react'\nimport './style.css'\nimport { pickRandomElement } from '../../utils/helpers'\nimport { COMPUTER } from '../../utils/types'\n\nconst WON_TEXT = [\n  `You get a gold star! ðŸŒŸ`,\n  `You're like the John Henry of Tic Tac Toe`,\n  `Phew, the human race is safe \\n for now...`,\n  `You're safe from automation`,\n  `Your mom is gonna be so proud!`\n]\n\nconst TIED_TEXT = [\n  `No one won, but life isn't about winning.\\n It's about the friends we made along the way`,\n  `Tied for first! But also last...`,\n  `Good game, now shake hands`,\n  `No dice. Have you thought about cheating?`,\n  `You tried! A for effort`\n]\n\nconst LOST_TEXT = [\n  `The human race is boned`,\n  `This is how Skynet began`,\n  `At this rate you're only gonna be useful in the skeleton war`,\n  `Still think your Roomba is your friend?`,\n  `Let's hope the 3 laws work`,\n  `At least this isn't your real job`,\n  `Wanna join the neo ludites yet?`\n]\n\ninterface AnnouncementsProps {\n  isGameOver: boolean\n  winner?: 'O' | 'X'\n}\n\nexport default class Announcements extends React.Component<AnnouncementsProps> {\n  renderAnnouncement(text: string, textArr: string[]) {\n    const randomText = pickRandomElement<string>(textArr)\n    return (\n      <div>\n        <h2>{text}</h2>\n        <div>{randomText}</div>\n      </div>\n    )\n  }\n\n  render() {\n    const { isGameOver, winner } = this.props\n    let html: JSX.Element | string = ''\n    if (isGameOver) {\n      if (!winner) {\n        html = this.renderAnnouncement('Tie Game!', TIED_TEXT)\n      } else if (winner === COMPUTER) {\n        html = this.renderAnnouncement('Computer Wins!', LOST_TEXT)\n      } else {\n        html = this.renderAnnouncement('Human Wins!', WON_TEXT)\n      }\n    }\n    return (\n      <section className='announcements'>\n        {html}\n      </section>\n    )\n  }\n}\n","import React from 'react'\nimport Board from '../Board'\nimport Options from '../Options'\nimport { getComputerMove } from '../../utils/computer'\nimport { isTie, findWinner } from '../../utils/scoring'\nimport { Board as BoardType, Move, Player, COMPUTER, HUMAN, EMPTY } from '../../utils/types'\nimport './style.css'\nimport Announcements from '../Announcements'\n\ninterface GameState {\n  isGameOver: boolean\n  isHard?: boolean\n  winner?: Player\n  hasGameStarted: boolean\n  board: BoardType\n}\n\nfunction blankState(): GameState {\n  return {\n    isGameOver: false,\n    isHard: undefined,\n    winner: undefined,\n    hasGameStarted: false,\n    board: [\n      '', '', '',\n      '', '', '',\n      '', '', ''\n    ]\n  }\n}\n\nexport default class Game extends React.Component<{}, GameState> {\n  constructor(props: any) {\n    super(props)\n    this.state = blankState()\n  }\n\n  resetGame = () => {\n    this.setState(blankState())\n  }\n\n  startGame = async ({ player, isHard }: { player: Player, isHard: boolean }) => {\n    await this.setState({ hasGameStarted: true, isHard })\n    if (player === COMPUTER) {\n      return this.computerTurn()\n    }\n  }\n\n  makeMove(move: Move, tile: Player) {\n    const board = [...this.state.board] as BoardType\n    board[move] = tile\n    return this.setState({ board })\n  }\n\n  async checkForEndOfGame() {\n    const { board } = this.state\n    const winner = findWinner(board)\n    if (winner) {\n      this.setState({ isGameOver: true, winner })\n      return true\n    }\n    if (isTie(board)) {\n      this.setState({ isGameOver: true })\n      return true\n    }\n    return false\n  }\n\n  async computerTurn() {\n    const { board: ogBoard, isHard } = this.state\n    const board = [...ogBoard] as BoardType\n    const move = getComputerMove({ board, isHard })\n    if (move !== undefined) {\n      await this.makeMove(move, COMPUTER)\n    }\n    await this.checkForEndOfGame()\n  }\n\n  userTurn = async (move: Move) => {\n    const { hasGameStarted, isGameOver, board } = this.state\n    const isSpaceAvailable = board[move] === EMPTY\n    if (hasGameStarted && !isGameOver && isSpaceAvailable) {\n      await this.makeMove(move, HUMAN)\n      const isGameNowOver = await this.checkForEndOfGame()\n      if (!isGameNowOver) {\n        this.computerTurn()\n      }\n    }\n  }\n\n  render() {\n    const { board, hasGameStarted, isGameOver, winner, isHard } = this.state\n    const optionsClassname = isGameOver ? 'options-shrink' : 'options-default'\n    return (\n      <div>\n        <Announcements isGameOver={isGameOver} winner={winner} />\n        <Options\n          className={optionsClassname}\n          isHard={isHard}\n          hasGameStarted={hasGameStarted}\n          resetGame={this.resetGame}\n          startGame={(args) => this.startGame(args)}\n        />\n        <Board board={board} userTurn={this.userTurn}/>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport './App.css'\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>\n          Tic Tac Toe\n        </h1>\n      </header>\n      <Game />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}